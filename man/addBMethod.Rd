% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/addBMethod.R
\name{addBMethod}
\alias{addBMethod}
\title{Add new method to BenchDesign object}
\usage{
addBMethod(b, blabel, bfunc, bpost = NULL, ...)
}
\arguments{
\item{b}{BenchDesign object.}

\item{blabel}{Character name for the method.}

\item{bfunc}{Primary function to be benchmarked.}

\item{bpost}{Optional post-processing function that takes
output of \code{bfunc} as input. Ignored if NULL.
(default = NULL)}

\item{...}{Named \code{parameter = value} pairs to be passed to
\code{func}.}
}
\description{
This function takes a BenchDesign object and returns a
modified object with the specified method included. At a
minimum, a string name for the method, \code{blabel}, and the
workhorse function for the method, \code{bfunc}, must be specified
in addition to the primary BenchDesign object.
}
\details{
The inputs for the call to \code{blabel} should be specified as
\code{parameter = value} pairs, where the \code{value} can be any
fixed value, variable, or column in the \code{bdata} of the
BenchDesign object.

An optional secondary function, \code{bpost}, can be specified if
the output of the workhorse function, \code{bfunc}, needs to be
further processed. As an example, \code{bpost} may be a simple
"getter" function for accessing the column of interest from
the large object returned by \code{bfunc}.
}
\examples{
\dontrun{
## assume sim_df is a data.frame with column: pval 
bd <- BenchDesign(sim_df)

## example calculating qvalue from pvalues

## using standard call
qv <- qvalue::qvalue(p = sim_df$pval)
qv <- qv$qvalue

## adding same method to BenchDesign
bd <- bd \%>\%
    addBMethod("qv",
               bfunc = qvalue::qvalue,
               bpost = function(x) { x$qvalue },
               p = pval)
}

}
\author{
Patrick Kimes
}
