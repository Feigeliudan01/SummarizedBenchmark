% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/addBMethod.R
\name{addBMethod}
\alias{addBMethod}
\title{Add new method to BenchDesign object}
\usage{
addBMethod(b, blabel, bfunc, bpost = NULL, bmeta = NULL, ...)
}
\arguments{
\item{b}{BenchDesign object.}

\item{blabel}{Character name for the method.}

\item{bfunc}{Primary function to be benchmarked.}

\item{bpost}{Optional post-processing function that takes
results of \code{bfunc} as input. Ignored if NULL.
If multiple assays (metrics) should be generated for each
method, this can be accomplished by specifying a named
list of post-processing functions, one for each assay.
(default = NULL)}

\item{bmeta}{Optional metadata information for method to be
included in \code{colData} of \code{SummarizedBenchmark} object
generated using \code{buildBench}. See Details for more
information. Ignored if NULL. (default = NULL)}

\item{...}{Named \code{parameter = value} pairs to be passed to
\code{bfunc}.}
}
\description{
This function takes a BenchDesign object and returns a
modified object with the specified method included. At a
minimum, a string name for the method, \code{blabel}, and the
workhorse function for the method, \code{bfunc}, must be specified
in addition to the primary BenchDesign object.
}
\details{
The inputs for the call to \code{blabel} should be specified as
\code{parameter = value} pairs, where the \code{value} can be any
fixed value, variable, or column in the \code{bdata} of the
BenchDesign object.

An optional secondary function, \code{bpost}, can be specified if
the output of the workhorse function, \code{bfunc}, needs to be
further processed. As an example, \code{bpost} may be a simple
"getter" function for accessing the column of interest from
the large object returned by \code{bfunc}.

The optional \code{bmeta} parameter accepts a named list of metadata
tags to be included for the method in the resulting \code{SummarizedBenchmark}
object. This can be useful for two primary cases. First, it can help keep
analyses better organized by allowing the specification of additional
information that should be stored with methods, e.g. a tag for "method type"
or descriptive information on why the method was included in the comparison.
Second, and more improtantly, the \code{bmeta} parameter can be used to overwrite
the package and version information that is automatically extracted from the
function specified to \code{bfunc}. This is particularly useful when the function
passed to \code{bfunc} is a wrapper for a script in (or outside of) R, and the
appropriate package and version information can't be directly pulled from
\code{bfunc}. In this case, the user can either manually specify the \code{"pkg_name"}
and \code{"pkg_vers"} values to \code{bmeta} as a list, or specify a separate function
that should be used to determine the package name and version. If a separate
function should be used, it should be passed to \code{bmeta} as a list entry
with the name \code{pkg_func} and first quoted using \code{rlang::quo}, e.g.
\code{list(pkg_func = quo(p.adjust))}.
}
\examples{
\dontrun{
## assume sim_df is a data.frame with column: pval 
bd <- BenchDesign(sim_df)

## example calculating qvalue from pvalues

## using standard call
qv <- qvalue::qvalue(p = sim_df$pval)
qv <- qv$qvalue

## adding same method to BenchDesign
bd <- bd \%>\%
    addBMethod("qv",
               bfunc = qvalue::qvalue,
               bpost = function(x) { x$qvalue },
               p = pval)
}

}
\author{
Patrick Kimes
}
