% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/addMethod.R
\name{addMethod}
\alias{addMethod}
\title{Add method to BenchDesign object}
\usage{
addMethod(bd, label, func, params = rlang::quos(), post = NULL,
  meta = NULL)
}
\arguments{
\item{bd}{\code{\link[=BenchDesign-class]{BenchDesign}} object.}

\item{label}{Character name for the method.}

\item{func}{Primary function to be benchmarked.}

\item{params}{Named quosure list created using \code{\link[rlang:quotation]{quos}} of
\code{parameter = value} pairs to be passed to \code{func}.}

\item{post}{Optional post-processing function that takes
results of \code{func} as input. Ignored if \code{NULL}.
If multiple assays (metrics) should be generated for each
method, this can be accomplished by specifying a named
list of post-processing functions, one for each assay.
(default = \code{NULL})}

\item{meta}{Optional metadata information for method to be
included in \code{colData} of \code{\link[=SummarizedBenchmark-class]{SummarizedBenchmark}} object
generated using \code{link{buildBench}}. See Details for more
information. Ignored if \code{NULL}. (default = \code{NULL})}
}
\value{
Modified \code{\link[=BenchDesign-class]{BenchDesign}} object with
new method added.
}
\description{
Takes a \code{\link[=BenchDesign-class]{BenchDesign}} object
and the definition of a new method for benchmarking and returns
the original \code{\link[=BenchDesign-class]{BenchDesign}} with
the new method included.

At a minimum, a method label (\code{label =}), and the
workhorse function for the method (\code{func =}) must be specified
for the new method.

Parameters for the method must be specified as a
\code{\link[rlang:quotation]{quos}} named list of \code{parameter = value} pairs
mapping entries in the benchmarking data to the function parameters.
For users familiar with the \pkg{ggplot2} package, this can be
viewed similar to the \code{aes =} mapping of data to geometry
parameters.

An optional secondary function, \code{post}, can be specified if
the output of the workhorse function, \code{func}, needs to be
further processed. As an example, \code{post} may be a simple
"getter" function for accessing the column of interest from
the large object returned by \code{func}.
}
\details{
The optional \code{meta} parameter accepts a named list of metadata
tags to be included for the method in the resulting
\code{\link[=SummarizedBenchmark-class]{SummarizedBenchmark}}
object. This can be useful for two primary cases. First, it can help keep
analyses better organized by allowing the specification of additional
information that should be stored with methods, e.g. a tag for "method type"
or descriptive information on why the method was included in the comparison.
Second, and more improtantly, the \code{meta} parameter can be used to overwrite
the package and version information that is automatically extracted from the
function specified to \code{func}. This is particularly useful when the function
passed to \code{func} is a wrapper for a script in (or outside of) R, and the
appropriate package and version information can't be directly pulled from
\code{func}. In this case, the user can either manually specify the \code{"pkg_name"}
and \code{"pkg_vers"} values to \code{meta} as a list, or specify a separate function
that should be used to determine the package name and version. If a separate
function should be used, it should be passed to \code{meta} as a list entry
with the name \code{pkg_func} and first quoted using \code{\link[rlang:quotation]{quo}}, e.g.
\code{list(pkg_func = quo(p.adjust))}.
}
\examples{
## create example data set of p-values
df <- data.frame(pval = runif(100))

## example calculating qvalue from pvalues

## using standard call
qv <- qvalue::qvalue(p = df$pval)
qv <- qv$qvalue

## adding same method to BenchDesign
bench <- BenchDesign(data = df)
bench <- addMethod(bench,
                   label = "qv",
                    func = qvalue::qvalue,
                    post = function(x) { x$qvalue },
                    params = rlang::quos(p = pval))

}
\seealso{
\code{\link{modifyMethod}}, \code{\link{expandMethod}}, \code{\link{dropMethod}}
}
\author{
Patrick Kimes
}
