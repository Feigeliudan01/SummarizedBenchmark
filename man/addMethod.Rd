% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/addMethod.R
\name{addMethod}
\alias{addMethod}
\title{Add method to BenchDesign object}
\usage{
addMethod(bd, label, func, params = rlang::quos(), post = NULL,
  meta = NULL)
}
\arguments{
\item{bd}{BenchDesign object.}

\item{label}{Character name for the method.}

\item{func}{Primary function to be benchmarked.}

\item{params}{Named quosure list created using \code{rlang::quos} of
\code{parameter = value} pairs to be passed to \code{func}.}

\item{post}{Optional post-processing function that takes
results of \code{func} as input. Ignored if NULL.
If multiple assays (metrics) should be generated for each
method, this can be accomplished by specifying a named
list of post-processing functions, one for each assay.
(default = NULL)}

\item{meta}{Optional metadata information for method to be
included in \code{colData} of \code{SummarizedBenchmark} object
generated using \code{buildBench}. See Details for more
information. Ignored if NULL. (default = NULL)}
}
\value{
A copy of the originally supplied BenchDesign with the
new method added.
}
\description{
Takes a BenchDesign object and returns a
modified object with the specified method included. At a
minimum, a string name for the method, \code{label}, and the
workhorse function for the method, \code{func}, must be specified
in addition to the primary BenchDesign object.

The inputs for the call to \code{label} should be specified as
\code{parameter = value} pairs, where the \code{value} can be any
fixed value, variable, or column in the \code{bdata} of the
BenchDesign object.

An optional secondary function, \code{post}, can be specified if
the output of the workhorse function, \code{func}, needs to be
further processed. As an example, \code{post} may be a simple
"getter" function for accessing the column of interest from
the large object returned by \code{func}.
}
\details{
The optional \code{meta} parameter accepts a named list of metadata
tags to be included for the method in the resulting \code{SummarizedBenchmark}
object. This can be useful for two primary cases. First, it can help keep
analyses better organized by allowing the specification of additional
information that should be stored with methods, e.g. a tag for "method type"
or descriptive information on why the method was included in the comparison.
Second, and more improtantly, the \code{meta} parameter can be used to overwrite
the package and version information that is automatically extracted from the
function specified to \code{func}. This is particularly useful when the function
passed to \code{func} is a wrapper for a script in (or outside of) R, and the
appropriate package and version information can't be directly pulled from
\code{func}. In this case, the user can either manually specify the \code{"pkg_name"}
and \code{"pkg_vers"} values to \code{meta} as a list, or specify a separate function
that should be used to determine the package name and version. If a separate
function should be used, it should be passed to \code{meta} as a list entry
with the name \code{pkg_func} and first quoted using \code{rlang::quo}, e.g.
\code{list(pkg_func = quo(p.adjust))}.
}
\examples{
## create example data set of p-values
df <- data.frame(pval = runif(100))

## example calculating qvalue from pvalues

## using standard call
qv <- qvalue::qvalue(p = df$pval)
qv <- qv$qvalue

## adding same method to BenchDesign
bench <- BenchDesign(data = df)
bench <- addMethod(bench,
                   label = "qv",
                    func = qvalue::qvalue,
                    post = function(x) { x$qvalue },
                    params = rlang::quos(p = pval))

}
\seealso{
\code{\link{modifyMethod}}, \code{\link{expandMethod}}, \code{\link{dropMethod}}
}
\author{
Patrick Kimes
}
